<?php
namespace Modules\Contracts\Front\Controllers;

use App\Controllers\BaseController;
use CodeIgniter\CodeIgniter;
use Modules\Contracts\Front\Models\ContractsModel;
use Modules\Contracts\Front\Models\ContractPlaceholder;
use Modules\Contracts\Front\Models\ContractAuditTrail;
use CodeIgniter\API\ResponseTrait;

use Mpdf\Mpdf;


class Contracts extends BaseController
{
    use ResponseTrait;
    protected $template_dir = 'Modules\Contracts\Front\Views\\';

    public function __construct()
    {
        $this->module_name  = 'contracts';
        $this->model = new ContractsModel();
        $this->config = config(\Modules\Contracts\Config\ContractsConfig::class);
        //parent::__construct();
    }
    
    public function index()
    {
        $data = array();
        $data["mod_version"] = $this->config->version;

        $data["contracts"] = $this->model->findAll();

        return view($this->template_dir.'contracts.php', $data);
    }

    public function details($id)
    {
        $audit_model = new ContractAuditTrail();
        $data = array();

        $data["row"] = $this->model->find($id);
        $data["audit"] = $audit_model->where("contract_id", $data["row"]->id)->findAll();

        return view($this->template_dir.'contract_details', $data);
    }

    public function getPDF($id)
    {
        $placeholder_model = new ContractPlaceholder();
        $audit_model = new ContractAuditTrail();
        $data = array();

        $data["row"] = $this->model->find($id);
        $data["audit"] = $audit_model->where("contract_id", $data["row"]->id)->findAll();
        $data["placeholders"] = $placeholder_model->where("contract_id", $data["row"]->id)->findAll();
        $placeholderMap = [];
        foreach ($data["placeholders"] as $placeholder) {
            $placeholderMap['{{' . $placeholder->api_key . '}}'] = $placeholder->api_value;
        }        

        $tmp_contract = json_decode(json_decode($data["row"]->contract_content));
        $contract = [];
        foreach ($tmp_contract as $key => $v) {
            $c = $v;
            $c->label = str_replace(array_keys($placeholderMap), array_values($placeholderMap), $c->label);

            $contract[] = $c;
        }
        $data["contract"] = $contract;

        $mpdf = new Mpdf();
        $mpdf->SetHTMLHeader('
        <div style="text-align: right; font-weight: bold;">
        '.$data["row"]->created_at.' <img src="https://cdnik.esignatures.io/company_logos/c9e1bb90-11b4-4f73-a50c-6e25860b1fca/202302271700-20c72689-c1d8-4485-be0e-5c02cd72e24a/logo_evaremovebgpreview.png?tr=h-100" />
        </div>');

        $mpdf->SetHTMLFooter('
        <table width="100%">
            <tr>
                <td width="33%">{DATE j-m-Y}</td>
                <td width="33%" align="center">{PAGENO}/{nbpg}</td>
                <td width="33%" style="text-align: right;">Generated by Signatura</td>
            </tr>
        </table>');
        $html = view($this->template_dir.'pdf_contract_details', $data);
        $mpdf->WriteHTML($html);
        
        $mpdf->OutputFile(__DIR__ . '/file.pdf');
        return;
        

        return view($this->template_dir.'contract_details', $data);
    }

    public function signContract($key)
    {
        $placeholder_model = new ContractPlaceholder();
        $audit_model = new ContractAuditTrail();
        $data = array();
        $data["row"] = $this->model->findByUrl($key);
        $data["placeholders"] = $placeholder_model->where("contract_id", $data["row"]->id)->findAll();
        $placeholderMap = [];
        foreach ($data["placeholders"] as $placeholder) {
            $placeholderMap['{{' . $placeholder->api_key . '}}'] = $placeholder->api_value;
        }        

        $tmp_contract = json_decode(json_decode($data["row"]->contract_content));
        $contract = [];
        foreach ($tmp_contract as $key => $v) {
            $c = $v;
            $c->label = str_replace(array_keys($placeholderMap), array_values($placeholderMap), $c->label);

            $contract[] = $c;
        }
        $data["contract"] = $contract;

        and_add_js("https://cdnjs.cloudflare.com/ajax/libs/jquery/3.7.1/jquery.min.js");
        and_add_js("/assets/sign/contract_sign.js");

        $log = [];
        $log["contract_id"] = $data["row"]->id;
        $log["event_name"] = "Contract is viewed by signer";
        $log["event_date"] = date("Y-m-d H:i:s");
        $log["ip"] = $_SERVER["REMOTE_ADDR"];
        $log["author_name"] = $data["row"]->signer_first_name. " ".$data["row"]->signer_last_name;
        $audit_model->insert($log);

        $log = [];
        $log["contract_id"] = $data["row"]->id;
        $log["event_name"] = "Email address is verified";
        $log["event_date"] = date("Y-m-d H:i:s");
        $log["ip"] = $_SERVER["REMOTE_ADDR"];
        $log["author_name"] = $data["row"]->signer_first_name. " ".$data["row"]->signer_last_name;
        $audit_model->insert($log);

        return view($this->template_dir.'sign_contract', $data);
    }

    public function signContractSuccess($key)
    {
        $data = array();

        $data["row"] = $this->model->findByUrl($key);

        return view($this->template_dir.'sign_contract_success', $data);
    }

    public function doSignContract(){
        $audit_model = new ContractAuditTrail();
        $key   = $this->request->getPost('contract_id');
        $contract = $this->model->findByUrl($key);

        if(isset($contract) && $contract->id>0){
            $data = array();
            $data["signed_at"] = date("Y-m-d H:i:s");
            $this->model->update($contract->id, $data);

            $log = [];
            $log["contract_id"] = $contract->id;
            $log["event_name"] = "Signed the contract";
            $log["event_date"] = date("Y-m-d H:i:s");
            $log["ip"] = $_SERVER["REMOTE_ADDR"];
            $log["author_name"] = $contract->signer_first_name. " ".$contract->signer_last_name;
            $audit_model->insert($log);
    
            return $this->response->setJSON(['success' => true]);
        }else{
            return $this->response->setJSON(['success' => false, 'error_message'=>'Contract not found!']);
        }

    }

}
?>